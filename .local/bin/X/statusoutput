#!/bin/sh

# Disable cursor
tput civis

print_network_traffic() {
	# Module showing network traffic. Shows how much data has been received (RX) or
	# transmitted (TX) since the previous time this script ran. So if run every
	# second, gives network traffic per second.

	update() {
		sum=0
		for arg; do
			read -r i <"$arg"
			sum=$((sum + i))
		done
		cache=${XDG_CACHE_HOME:-$HOME/.cache}/${1##*/}
		[ -f "$cache" ] && read -r old <"$cache" || old=0
		printf %d\\n "$sum" >"$cache"
		printf %d\\n $((sum - old))
	}

	rx=$(update /sys/class/net/[ew]*/statistics/rx_bytes)
	tx=$(update /sys/class/net/[ew]*/statistics/tx_bytes)

	rxs=$(numfmt --to=iec "$rx")
	txs=$(numfmt --to=iec "$tx")

	printf "🔻 %4sB 🔺 %4sB\\n" "$rxs" "$txs"
}

print_ram_usage() {
	free -m | awk '/^Mem/ {print $3}'
}

print_frequencies() {
	for freq in $(grep "MHz" /proc/cpuinfo | grep -o "[0-9]*\." | sed "s/...$//"); do
		printf "%2s " $freq
	done
}

print_cpubars() {
	# Cache in tmpfs to improve speed and reduce SSD load
	cache=/tmp/cpubarscache

	# id total idle
	stats=$(awk '/cpu[0-9]+/ {printf "%d %d %d\n", substr($1,4), ($2 + $3 + $4 + $5), $5 }' /proc/stat)
	[ ! -f $cache ] && echo "$stats" >"$cache"
	old=$(cat "$cache")
	echo "$stats" | while read -r row; do
		id=${row%% *}
		rest=${row#* }
		total=${rest%% *}
		idle=${rest##* }

		case "$(echo "$old" | awk '{if ($1 == id)
			printf "%d\n", (1 - (idle - $3)  / (total - $2))*100 /12.5}' \
			id="$id" total="$total" idle="$idle")" in

		"0") printf "▁" ;;
		"1") printf "▂" ;;
		"2") printf "▃" ;;
		"3") printf "▄" ;;
		"4") printf "▅" ;;
		"5") printf "▆" ;;
		"6") printf "▇" ;;
		"7") printf "█" ;;
		"8") printf "█" ;;
		esac
	done
	echo "$stats" >"$cache"
}

print_battery() {
	# Loop through all attached batteries.
	for battery in /sys/class/power_supply/BAT?; do
		# Get its remaining capacity and charge status.
		capacity=$(cat "$battery"/capacity 2>/dev/null) || break
		status=$(sed "s/[Dd]ischarging/🔋/;s/[Nn]ot charging/🛑/;s/[Cc]harging/🔌/;s/[Uu]nknown/🔌❕/;s/[Ff]ull/⚡/" "$battery"/status)

		# If it is discharging and 25% or less, we will add a ❗ as a warning.
		[ "$capacity" -le 25 ] && [ "$status" = "🔋" ] && warn="❗"

		printf "%s%s%s%% " "$status" "$warn" "$capacity"
		unset warn
	done | sed 's/ *$//'
}

print_date_time() {
	nepcal d | grep -o ".*," | tr ',\n' ' '
	date "+%b-%m-%d %a %I:%M:%S%P"
}

while true; do
	output="$(print_network_traffic)\n$(print_ram_usage)Mi - $(print_frequencies)- $(print_cpubars)\n$(print_battery)\n$(print_date_time)"

	clear
	echo -n "$output"
	sleep 1
done
